decide() {
	return noise() > 0.;
}

	
Param maxKeyLenSamps(10240);
// Param firstWs(0);
Param posWidthSamps(44100);

Param fftWindowSize(1024);

Param chans(1);
Param chansOffset(1);

// Param targetFreqBin(0);

Param dryWet(0.);

Buffer freqMap("rbFreqMap");

//Data match(posWidthWs);
Buffer match("dbgMatch");

freqMapSize = dim(freqMap);

//firstPhase = in1;
firstSamps = in1;
// firstPhase * freqMapSize;
firstWs = ceil(firstSamps / fftWindowSize);

granuleSizeSamps = in2;

DEBUG = -1;

DEBUG_IN = in4;

chan = 0;

maxKeyLenWs = ceil(maxKeyLenSamps / fftWindowSize);
if (maxKeyLenWs == 0) {
	maxKeyLenWs = 100000000;
}

keyLenWs = min(ceil(granuleSizeSamps / fftWindowSize), maxKeyLenWs);

DEBUG = keyLenWs;

targetFreqBin = in3;

posWidthWs = floor(posWidthSamps / fftWindowSize);



DEBUG = posWidthWs;
// calculate raw match
for (i = 0; i < posWidthWs; i += 1) {

	rawI = ((firstWs + i) * fftWindowSize + targetFreqBin);
	sourceFreqA = freqMap.peek(rawI % freqMapSize, chan + chansOffset);
	m = sourceFreqA;
	match.poke(m, i, chan);
}

curKeyV = 0;

// normalize, window-agg, integrate match
matchSum = 0;
popElement = 0;


for (i = 0; i < posWidthWs; i += 1) {

	curKeyV += match.peek(i, chan) - popElement;
	targetI = i - keyLenWs + 1;
	if (targetI >= 0) {
		popElement = match.peek(targetI, chan);
		matchSum += curKeyV;
		match.poke(curKeyV, targetI, chan);
	}
}


mean = matchSum / (posWidthWs - keyLenWs + 1);

roll = 0.9 * matchSum / mean;

scaledMatchSum = 0;
for (i = 0; i < posWidthWs - keyLenWs + 1; i += 1) {
	f = match.peek(i, chan) / mean;
	scaledF = max(0, (f - mean) * (dryWet + 1.) + mean);
	scaledMatchSum += scaledF;
	match.poke(scaledF, i, chan);
}


roll = ((noise() + 1.) / 2.) * scaledMatchSum;

grainPositionWs = 0;

for (i = 0; i < posWidthWs - keyLenWs + 1; i += 1) {
	roll -= match.peek(i, chan);
	if (roll <= 0) {
		grainPositionWs = i;
		break;
	}
}

debugIndex = ((firstWs + grainPositionWs) * fftWindowSize + targetFreqBin) % freqMapSize;

//DEBUG = freqMap.peek(debugIndex, chan + chansOffset);
//DEBUG = debugIndex;
//z,DEBUG = peek(freqMap, 0, channels=2);
//DEBUG = freqMap.peek(44031, 1);

out1 = ((firstWs + grainPositionWs) * fftWindowSize) % freqMapSize; // todo: randomize?
out2 = DEBUG;

