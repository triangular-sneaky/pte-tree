decide() {
	return noise() > 0.;
}

Param maxKeyLenSamps(10240);
// Param firstWs(0);
Param posWidthSamps(44100);

Param fftWindowSize(1024);

Param chans(1);
Param chansOffset(1);

// Param targetFreqBin(0);

Param dryWet(0.);

Buffer freqMap("rbFreqMap");

//Data match(posWidthWs);
Buffer match("dbgMatch");

firstSamps = in1;
firstWs = ceil(firstSamps / fftWindowSize);

granuleSizeSamps = in2;

DEBUG = -1;

chan = 0;

maxKeyLenWs = ceil(maxKeyLenSamps / fftWindowSize);
if (maxKeyLenWs == 0) {
	maxKeyLenWs = 100000000;
}

keyLenWs = min(ceil(granuleSizeSamps / fftWindowSize), maxKeyLenWs);



targetFreqBin = in3;

posWidthWs = floor(posWidthSamps / fftWindowSize);

freqMapSize = dim(freqMap);


// calculate raw match
for (i = 0; i < posWidthWs; i+= 1) {
	
	rawI = ((firstWs + i) * fftWindowSize + targetFreqBin);
	sourceFreqA = peek(freqMap, rawI % freqMapSize, chan + chansOffset );
	m = sourceFreqA;
	poke(match, m, i, chan);
	DEBUG = m;
}

curKeyV = 0;

// normalize, window-agg, integrate match
matchSum = 0;
popElement = 0;


for (i = 0; i < posWidthWs; i+= 1) {
		
	curKeyV += peek(match, i, chan) - popElement;
	targetI =  i - keyLenWs + 1;
	if (targetI >= 0) {
		popElement = peek(match, targetI, chan);
		matchSum += curKeyV;
		poke(match, curKeyV, targetI, chan);
	}
}


mean = matchSum / (posWidthWs - keyLenWs + 1);

roll = 0.9 * matchSum / mean;

scaledMatchSum = 0;
for (i = 0; i < posWidthWs - keyLenWs + 1; i += 1) {
	f = peek(match, i, chan) / mean;
	scaledF = max(0, (f - mean) * (dryWet + 1.) + mean);
	scaledMatchSum += scaledF;
	poke(match, scaledF, i, chan);
}


roll = ((noise() + 1.) / 2.) * scaledMatchSum;

grainPositionWs = 0;

for (i = 0; i < posWidthWs - keyLenWs + 1; i += 1) {
	roll -= peek(match, i, chan);
	if (roll <= 0) {
		grainPositionWs = i;
		break;
	}
}


out1 = (firstWs + grainPositionWs) * fftWindowSize; // todo: randomize?
out2 = DEBUG;