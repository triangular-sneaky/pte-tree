decide() {
	return noise() > 0.;
}

fftfiForSourceSi(si, snFftWindowSize) {
	return floor(si / snFftWindowSize ) + 1;
}
// notation
// si -> sample index in source
// sn -> number of samples in source
// fi -> fft frame index in fftmap
// fn -> number of fft frames in fftmap
	
Param snMaxKeyLen(10240);
Param snPosStartOffset(44100); // negative offset back
Param snPosEndOffset(44100); // negative offset back

Param snFftWindowSize(1024);

Param sourceChan(1);
Param guideChan(0);

Param dryWet(0.);

Buffer freqMap("rbFreqMap");
Buffer fftPhase("rbFftPhase");

//Data match(fnPosWidth);
Buffer match("dbgMatch");

freqMapSize = dim(freqMap);
// inputs and derivatives
// in1: buffer head siHead -> drives fiPosStart, fnPosWidth, fiGuide
siHead = in1;
fiGuide = floor(siHead / snFftWindowSize) - 1; // index of last fully written fft frame

siPosStart = siHead + snPosStartOffset;
siPosEnd = siHead + snPosEndOffset;

fiPosStart = fftfiForSourceSi(siPosStart, snFftWindowSize);
fiPosEnd = fftfiForSourceSi(siPosEnd, snFftWindowSize);

fnPosWidth = max(1, fiPosEnd - fiPosStart);
fiPosStart = min(fiPosStart, fiGuide);

snGranuleSize = in2;

DEBUG = -1;

DEBUG_IN = in4;

chan = 0;

fnMaxKeyLen = ceil(snMaxKeyLen / snFftWindowSize);
if (fnMaxKeyLen == 0) {
	fnMaxKeyLen = 100000000;
}

fnKeyLen = min(ceil(snGranuleSize / snFftWindowSize), fnMaxKeyLen);

// 1. process / cache fiGuide @ guideChan
// 2. 

maxBinV = -1;
maxBin = -1;

// DEBUG: verify fft indexing
for (i = 0; i < fnPosWidth * snFftWindowSize; i += 1) {
	rafi = (fiPosStart * snFftWindowSize + i);
	v = freqMap.peek(rafi % freqMapSize, sourceChan);
	p = fftPhase.peek(rafi % freqMapSize, sourceChan);
	if (p != i % snFftWindowSize) {
		DEBUG = i;
	}
}

// calculate raw match
for (i = 0; i < fnPosWidth; i += 1) {

	rafi = ((fiPosStart + i) * snFftWindowSize + targetFreqBin);
	sourceFreqA = freqMap.peek(rafi % freqMapSize, sourceChan);
	if (i == 0) {
		//	DEBUG = sourceFreqA;
	}
	m = sourceFreqA;
	match.poke(m, i, chan);
}


curKeyV = 0;

// normalize, frame-agg, integrate match
matchSum = 0;
popElement = 0;


for (i = 0; i < fnPosWidth; i += 1) {

	curKeyV += match.peek(i, chan) - popElement;
	targetI = i - fnKeyLen + 1;
	if (targetI >= 0) {
		popElement = match.peek(targetI, chan);
		matchSum += curKeyV;
		match.poke(curKeyV, targetI, chan);
	}
}


mean = matchSum / (fnPosWidth - fnKeyLen + 1);

roll = 0.9 * matchSum / mean;

scaledMatchSum = 0;
for (i = 0; i < fnPosWidth - fnKeyLen + 1; i += 1) {
	f = match.peek(i, chan) / mean;
	scaledF = max(0, (f - mean) * (dryWet + 1.) + mean);
	scaledMatchSum += scaledF;
	match.poke(scaledF, i, chan);
}


roll = ((noise() + 1.) / 2.) * scaledMatchSum;

grainPositionWs = 0;

for (i = 0; i < fnPosWidth - fnKeyLen + 1; i += 1) {
	roll -= match.peek(i, chan);
	if (roll <= 0) {
		grainPositionWs = i;
		break;
	}
}


debugIndex = ((fiPosStart + grainPositionWs) * snFftWindowSize + targetFreqBin) % freqMapSize;

//DEBUG = freqMap.peek(debugIndex, sourceChan);
//DEBUG = debugIndex;
//z,DEBUG = peek(freqMap, 0, channels=2);
//DEBUG = freqMap.peek(44031, 1);



out1 = ((fiPosStart + grainPositionWs) * snFftWindowSize) % freqMapSize; // todo: randomize?


out2 = DEBUG;

