decide() {
	return noise() > 0.;
}

uniformRand01() {
	return ((noise() + 1.) / 2.);
}

_wrap(value, cap) {
	zuppo = value + cap;
	return zuppo % cap;
}

_getSnFrameDrift(si, data, nSourceChans) {
	snFrameDrift = data.peek(_wrap(si, dim(data)), getBinIndexChan(nSourceChans));
	if (snFrameDrift == 0) return 0;
}

siToFi(si, snFftWindowSize, data, nSourceChans) {
	snFrameDrift = data.peek(_wrap(si, dim(data)), getBinIndexChan(nSourceChans));
	return floor( (si - snFrameDrift) / snFftWindowSize );
}

addressWavFrameStart(fi, snFftWindowSize, data, nSourceChans) {
	return _addressInFrame(fi, 0, snFftWindowSize, data, nSourceChans);
}

addressBin(fi, binIndex, snFftWindowSize, data, nSourceChans) {
	return _addressInFrame(fi + 1, binIndex, snFftWindowSize, data, nSourceChans);
}

addressCacheField(fi, field, snFftWindowSize, data, nSourceChans) {
	return _addressInFrame(fi + 1, field, snFftWindowSize, data, nSourceChans);
}

peekFrameCache(fi, field, sourceChanRelI, snFftWindowSize, data, nSourceChans) {
	return data.peek(
		addressCacheField(fi, field,  snFftWindowSize, data, nSourceChans), 
		getSourceChan(SEC_FRAME_CACHE(), sourceChanRelI, nSourceChans)
	);
}

pokeFrameCache(value, fi, field, sourceChanRelI, snFftWindowSize, data, nSourceChans) {
	data.poke(
		value,
		addressCacheField(fi, field,  snFftWindowSize, data, nSourceChans), 
		getSourceChan(SEC_FRAME_CACHE(), sourceChanRelI, nSourceChans)
	);
}



_addressInFrame(fi, frameIndex, snFftWindowSize, data, nSourceChans) {
	siFrameStartRaw = fi * snFftWindowSize;
	snFrameDrift = data.peek(_wrap(siFrameStartRaw, dim(data)), getBinIndexChan(nSourceChans));
	snFrameDriftCorrection = snFrameDrift == 0 ? 0 : snFftWindowSize - snFrameDrift;
	return _wrap((siFrameStartRaw + snFrameDriftCorrection + frameIndex), dim(data));
}
// get 0-based source chan index
getSourceChan(section, sourceChanRelI, nSourceChans) {
	return 1+ (nSourceChans + 1) * section + sourceChanRelI + 1;
}

getGuideChan(section, nSourceChans) {
	return 1+ (nSourceChans + 1) * section;
}

getBinIndexChan(nSourceChans) {
	return 0;
}

// sections
SEC_WAV() { return 0;}
SEC_MAG() { return 1;} 
SEC_PHASE() { return 2;}
SEC_FRAME_CACHE() { return 3;}

// fields in SEC_FRAME_CACHE
F_FRAME_CACHE_FUNDAMENTAL_BIN_INDEX() { return 0; }
F_FRAME_CACHE_FUNDAMENTAL_VALUE() { return 1; }
