decide() {
	return noise() > 0.;
}

uniformRand01() {
	return ((noise() + 1.) / 2.);
}

_wrap(value, cap) {
	zuppo = value + cap;
	return zuppo % cap;
}

_getSnFrameDrift(si, data, nSourceChans) {
	snFrameDrift = data.peek(_wrap(si, dim(data)), getFrameChanI(nSourceChans));
	if (snFrameDrift == 0) return 0;
}

siToFi(si, snFftWindowSize, data, nSourceChans) {
	snFrameDrift = data.peek(_wrap(si, dim(data)), getFrameChanI(nSourceChans));
	return floor( (si - snFrameDrift) / snFftWindowSize );
}

fiToFrameStartAddress(fi, snFftWindowSize, data, nSourceChans) {
	return _fiToFrameAddress(fi, 0, snFftWindowSize, data, nSourceChans);
}

fiToBinAddress(fi, binIndex, snFftWindowSize, data, nSourceChans) {
	return _fiToFrameAddress(fi + 1, binIndex, snFftWindowSize, data, nSourceChans);
}

_fiToFrameAddress(fi, frameIndex, snFftWindowSize, data, nSourceChans) {
	siFrameStartRaw = (fi + 1) * snFftWindowSize;
	snFrameDrift = data.peek(_wrap(siFrameStartRaw, dim(data)), getFrameChanI(nSourceChans));
	return _wrap((siFrameStartRaw - snFrameDrift + frameIndex), dim(data));
}

// get 0-based source chan index
getSourceChanI(section, sourceChanRelI, nSourceChans) {
	return (nSourceChans + 1) * section + sourceChanRelI + 1;
}

getGuideChanI(section, nSourceChans) {
	return (nSourceChans + 1) * section;
}

getFrameChanI(nSourceChans) {
	return (nSourceChans + 1)*3;
}

assertEq(textIndex, a, b) {
	if (a == b) {
		return 0;
	} else return textIndex, b;
}

findFundamental(fi, iSourceChan, snFftWindowSize, data, nSourceChans) {
	maxM = -1;
	maxMI = -1;
	for (i = 0; i < snFftWindowSize; i += 1) {
		binAddress = fiToBinAddress(fi, i, snFftWindowSize, data, nSourceChans);
		S_MAG = 1; 
		m = data.peek(binAddress, getSourceChanI(S_MAG, iSourceChan, nSourceChans));
		if (maxM < m) {
			maxM = m;
			maxMI = i;
		}
	} 
	return maxMI, maxM;
}

// ===================================
// notation
// si -> sample (value) index in wave
// sn -> number of samples in wave
// fi -> frame index in source
// fn -> number of frames


// ===================================
	
// ===================================
// parameters
// ===================================
Param snMaxKeyLen(10240);
Param snPosStartOffset(0); // negative offset back
Param snPosEndOffset(0); // negative offset back

Param snFftWindowSize(1024);

// number of source chans
Param nSourceChans(3);

// todo: use
Param guideModulationDryWet(0.);

Param magnitudeScaleToleranceUp(10.);
Param magnitudeScaleToleranceDown(0.);

Param algo(1);

// ===================================
// external data
// ===================================

Buffer data("rbGranularData");

// ===================================
// internal data
// ===================================


//Data match(fnPosWidth);
Buffer match("dbgMatch");

// sections
// NOTE: inlined above
S_WAV = 0;
S_MAG = 1;
S_PHASE = 2;

// methods
ALGO_LINEAR_POS_START = 0;
ALGO_LINEAR_HEAD = 1;

ALGO_SCULPT = 2;

dataSize = dim(data);
fnTotal = dataSize / snFftWindowSize;

// ===================================
// inputs and derivatives
// ===================================

siGuideHead = in1;// TODO: separate guide/source indexing
siSourceHead = in1; //buffer head siSourceHead -> drives fiPosStart, fnPosWidth, fiGuideHead
fiGuideHead = siToFi(siGuideHead - 2*snFftWindowSize,snFftWindowSize, data, nSourceChans) ; // index of last fully written fft frameframe
fiSourceHead = fiGuideHead; // TODO: separate guide/source indexing

siPosStart = siSourceHead + snPosStartOffset;
siPosEnd = siSourceHead + snPosEndOffset;

fiPosStart = siToFi(siPosStart, snFftWindowSize, data, nSourceChans);
fiPosEnd = siToFi(siPosEnd, snFftWindowSize, data, nSourceChans);

fiPosStart = min(fiPosStart, fiSourceHead);
fiPosEnd = min(fiPosEnd, fiSourceHead);
fnPosWidth = max(1, fiPosEnd - fiPosStart);

// TODO: keylen???
//snGranuleSize = in2;

// fnMaxKeyLen = ceil(snMaxKeyLen / snFftWindowSize);
// if (fnMaxKeyLen == 0) {
// 	fnMaxKeyLen = 100000000;
// }
// fnKeyLen = min(ceil(snGranuleSize / snFftWindowSize), fnMaxKeyLen);


// ===================================
// stubs and TODOs
// ===================================
chan = 0;

// ===================================
// results
// ===================================
ResultGrainPos = 0;
ResultGrainChan = 0;
ResultGrainScale = 1.;
ResultGrainPhaseShift = 0.;

// ===================================
// DEBUG
// ===================================
DebugIn = in4;
Debug0 = 0.;
Debug1 = 0.;
Debug2 = 0.;
Debug3 = 0.;


if (algo == ALGO_LINEAR_POS_START) {
	// ----------------------------------
	// DEBUG: debugging: indexing poc 
	// PoC draw FFT index on scope: 
	// find max freq in a frame at fiPosStart and debug_out its index
	// NOTE: intentionally using source pos on guide chan. this wont stand later
	// ----------------------------------
	maxM = -1.;
	maxMI = -1;
	for (i = 0; i < snFftWindowSize; i += 1) {
		binAddress = fiToBinAddress(fiPosStart, i, snFftWindowSize, data, nSourceChans);
		m = data.peek(binAddress, getGuideChanI(S_MAG, nSourceChans));
		if (maxM < m) {
			maxM = m;
			maxMI = i;
		}
	} 
	DebugPocFftIndexing = maxMI;
	DebugSanity0 = dataSize;
	Debug0BinAddress = fiToBinAddress(fiPosStart, 0, snFftWindowSize, data, nSourceChans);
	Debug0BinValue = data.peek(Debug0BinAddress, getGuideChanI(S_MAG, nSourceChans));

	Debug0 = DebugPocFftIndexing;
	Debug1 = Debug0BinAddress;
	Debug2 = fiPosStart;
	Debug3 = maxM;

	ResultGrainPos = fiToFrameStartAddress(fiPosStart, snFftWindowSize, data, nSourceChans);

}

if (algo == ALGO_LINEAR_HEAD) {
	ResultGrainPos = fiToFrameStartAddress(fiGuideHead, snFftWindowSize, data, nSourceChans);
}

if (algo == ALGO_SCULPT ) {
	// ---------------------------------
	// Sculpting algo based on source fundamental: uniform pick and scale by guide_mag[source_fundamental_bin] / source_mag[source_fundamental_bin]
	// ---------------------------------

	
	// for (i = 0; i < 1000; i += 1) {
	fiResultGrain = floor(fiPosStart + uniformRand01() * fnPosWidth);
	ResultGrainPos = fiToFrameStartAddress(fiResultGrain, snFftWindowSize, data, nSourceChans);

	ResultGrainChan = floor(uniformRand01() * nSourceChans);

	fundamentalI, apparentMag = findFundamental(fiResultGrain, ResultGrainChan, snFftWindowSize, data, nSourceChans);
	desiredMag = data.peek(fiToBinAddress(fiGuideHead, fundamentalI, snFftWindowSize, data, nSourceChans), getGuideChanI(S_MAG, nSourceChans));

	targetScale = 1.;

	if (apparentMag != 0) {
		targetScale = min(desiredMag / apparentMag, magnitudeScaleToleranceUp);
	}
		// if (targetScale > 1 - magnitudeScaleToleranceDown && targ)
	// }
	
	ResultGrainScale = targetScale;
	Debug0 = fundamentalI;
	Debug1 = apparentMag;
	Debug2 = desiredMag;
}





// ===================================
// OLD LOGIC
// ===================================

// // TODO: ?????
// // 1. process / cache fiGuideHead @ guideChan
// // 2. 

// // calculate raw match
// for (i = 0; i < fnPosWidth; i += 1) {

// 	rawI = ((fiPosStart + i) * snFftWindowSize + targetFreqBin);
// 	sourceFreqA = fftMag.peek(rawI % fftMagSize, sourceChan);
// 	if (i == 0) {
// 		//	DEBUG = sourceFreqA;
// 	}
// 	m = sourceFreqA;
// 	match.poke(m, i, chan);
// }


// curKeyV = 0;

// // normalize, frame-agg, integrate match
// matchSum = 0;
// popElement = 0;


// for (i = 0; i < fnPosWidth; i += 1) {

// 	curKeyV += match.peek(i, chan) - popElement;
// 	targetI = i - fnKeyLen + 1;
// 	if (targetI >= 0) {
// 		popElement = match.peek(targetI, chan);
// 		matchSum += curKeyV;
// 		match.poke(curKeyV, targetI, chan);
// 	}
// }


// mean = matchSum / (fnPosWidth - fnKeyLen + 1);

// roll = 0.9 * matchSum / mean;

// scaledMatchSum = 0;
// for (i = 0; i < fnPosWidth - fnKeyLen + 1; i += 1) {
// 	f = match.peek(i, chan) / mean;
// 	scaledF = max(0, (f - mean) * (dryWet + 1.) + mean);
// 	scaledMatchSum += scaledF;
// 	match.poke(scaledF, i, chan);
// }


// roll = ((noise() + 1.) / 2.) * scaledMatchSum;

// grainPositionWs = 0;

// for (i = 0; i < fnPosWidth - fnKeyLen + 1; i += 1) {
// 	roll -= match.peek(i, chan);
// 	if (roll <= 0) {
// 		grainPositionWs = i;
// 		break;
// 	}
// }


// debugIndex = ((fiPosStart + grainPositionWs) * snFftWindowSize + targetFreqBin) % fftMagSize;

// //DEBUG = fftMag.peek(debugIndex, sourceChan);
// //DEBUG = debugIndex;
// //z,DEBUG = peek(fftMag, 0, channels=2);
// //DEBUG = fftMag.peek(44031, 1);



// out1 = ((fiPosStart + grainPositionWs) * snFftWindowSize) % fftMagSize; // todo: randomize?





// ====== TEST SECTION ==============
TestIn = in6;
TestFailures = 0;

if (TestIn == 1) {
	// chan indexing
	TestFailures += assertEq(0x1, 0, getGuideChanI(S_WAV, nSourceChans));
	TestFailures += assertEq(0x2, 4, getGuideChanI(S_MAG, nSourceChans));
	TestFailures += assertEq(0x4, 1, getSourceChanI(S_WAV, 0, nSourceChans));
	TestFailures += assertEq(0x8, 6, getSourceChanI(S_MAG, 1, nSourceChans));
	TestFailures += assertEq(0x10, 12, getFrameChanI(nSourceChans));

	// siToFi
	TestFailures += assertEq(0x20, 1, siToFi(2000, snFftWindowSize, data, nSourceChans));
	f = 			assertEq(0x40, -1, siToFi(0, snFftWindowSize, data, nSourceChans));
	TestFailures += f;
	TestFailures += assertEq(0x80, 0, 
		siToFi(snFftWindowSize - data.peek(0, getFrameChanI(nSourceChans)),
			snFftWindowSize, data, nSourceChans));
	TestFailures += assertEq(0x100, -1, 
		siToFi(snFftWindowSize - data.peek(0, getFrameChanI(nSourceChans)),
			snFftWindowSize, data, nSourceChans) - 1);

	// fiToBinAddress
	TestFailures += assertEq(0x200, 16, data.peek(
		fiToBinAddress(
			siToFi(2000, snFftWindowSize, data, nSourceChans),
			16,
			snFftWindowSize,
			data, nSourceChans), 
			getFrameChanI(nSourceChans)
	));

	// fiToFrameStartAddress
	TestFailures += assertEq(0x400, 1, siToFi(2000, snFftWindowSize, data, nSourceChans));
	f, Debug0 = assertEq(0x800, 1024+512, 
		fiToFrameStartAddress(1, snFftWindowSize,
			data, nSourceChans));
	TestFailures += f;

	// uniformRand01
	fail1000 = 0;
	for (i = 0; i < 1000; i+=1) {
		r = uniformRand01();
		if (r < 0. || r > 1.) {
			fail1000 += 1;
		}
	} 
	Debug0 = fail1000;
	TestFailures += assertEq(0x1000, 0, fail1000);

	
}
// ====== /TEST SECTION ==============

// ======= returns ===================

out1 = ResultGrainPos;
out2 = ResultGrainChan ;
out3 = ResultGrainScale;
out4 = ResultGrainPhaseShift;


out10 = Debug0;
out11 = Debug1;
out12 = Debug2;
out13 = Debug3;

out15 = TestFailures;
